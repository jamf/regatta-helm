apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ template "regatta.name" . }}
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "regatta.labels" . | nindent 4 }}
spec:
  replicas: {{ .Values.replicas }}
  selector:
    matchLabels:
      {{- include "regatta.selectorLabels" . | nindent 6 }}
  serviceName: {{ template "regatta.name" . }}
  template:
    metadata:
      labels:
        {{- include "regatta.selectorLabels" . | nindent 8 }}
        {{- with .Values.additionalPodLabels }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
    spec:
      {{- if .Values.serviceAccount.create }}
      serviceAccountName: {{ template "regatta.serviceAccountName" . }}
      {{- end }}
      {{- with .Values.priorityClassName }}
      priorityClassName: {{ . }}
      {{- end }}
      {{- with .Values.podSecurityContext }}
      securityContext:
        {{- . | toYaml | nindent 8 }}
      {{- end }}
      containers:
      - name: {{ template "regatta.name" . }}
        image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
        imagePullPolicy: {{ .Values.image.imagePullPolicy }}
        env:
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        {{- if .Values.maintenance.enabled }}
        - name: MAINTENANCE_TOKEN
          valueFrom:
            secretKeyRef:
              name: {{ template "regatta.name" . }}-maintenance-token
              key: token
        {{- end }}
        {{- if .Values.tables.enabled }}
        - name: TABLES_TOKEN
          valueFrom:
            secretKeyRef:
              name: {{ template "regatta.name" . }}-tables-token
              key: token
          {{- end }}
        command:
        - "sh"
        - "-c"
        - >-
          export NODE_ID=$(expr $(echo "${POD_NAME: -1}") + 1);
          regatta {{ .Values.mode }}
          --memberlist.cluster-name={{ .Values.cluster.name }}
          --memberlist.node-name=$(POD_NAME)
          --memberlist.address=0.0.0.0:{{ .Values.cluster.port }}
          --memberlist.members=dnssrv+{{ template "regatta.name" . }}.{{ .Release.Namespace }}.svc.cluster.local
          --api.address=https://0.0.0.0:{{ .Values.api.port }}
          --api.advertise-address=https://$(POD_IP):{{ .Values.api.port }}
          --api.allowed-cn={{ .Values.api.tls.allowedCN }}
          --api.allowed-hostname={{ .Values.api.tls.allowedHostname }}
          --api.client-cert-auth={{ .Values.api.tls.clientCertAuth }}
          --api.max-concurrent-connections={{ .Values.api.maxConnections }}
          --api.max-concurrent-streams={{ .Values.api.maxStreams }}
          --api.stream-workers={{ .Values.api.workers }}
          --api.cert-filename=/api-cert/tls.crt
          --api.key-filename=/api-cert/tls.key
          --rest.address=http://0.0.0.0:{{ .Values.metricsPort }}
          --raft.logdb={{ .Values.raft.logdb }}
          --raft.snapshot-recovery-type={{ .Values.raft.snapshotRecoveryType }}
          --raft.address=$(POD_NAME).{{ template "regatta.name" . }}.{{ .Release.Namespace }}.svc.cluster.local:{{ .Values.raft.port }}
          --raft.listen-address=0.0.0.0:{{ .Values.raft.port }}
          --raft.node-id=${NODE_ID}
          --raft.node-host-dir=/data/raft
          --raft.initial-members={{ template "regatta.initialMembers" . }}
          --raft.state-machine-dir=/data/state-machine
          --raft.rtt={{ .Values.raft.rtt }}
          --raft.election-rtt={{ .Values.raft.electionRTT }}
          --raft.heartbeat-rtt={{ .Values.raft.heartbeatRTT }}
          --raft.snapshot-entries={{ .Values.raft.snapshotEntries | int64 }}
          --raft.compaction-overhead={{ .Values.raft.compactionOverhead | int64 }}
          --raft.max-in-mem-log-size={{ .Values.raft.maxInMemLogSize | int64 }}
          --raft.max-recv-queue-size={{ .Values.raft.maxRecvQueueSize | int64 }}
          --raft.max-send-queue-size={{ .Values.raft.maxSendQueueSize | int64 }}
          --storage.block-cache-size={{ .Values.storage.blockCacheSize | int64 }}
        {{- if eq .Values.mode "leader" }}
          --replication.enabled={{ .Values.replication.server.enabled }}
        {{- if .Values.replication.server.enabled }}
          --replication.address=https://$(POD_IP):{{ .Values.replication.server.port }}
          --replication.log-cache-size={{ .Values.replication.logCacheSize }}
        {{- end }}
        {{- end }}
        {{- if eq .Values.mode "follower" }}
          --replication.leader-address=https://{{ .Values.replication.leaderAddress }}
          --replication.max-snapshot-recv-bytes-per-second={{ .Values.replication.maxSnapshotRecvBytesPerSecond | int64 }}
          --replication.log-rpc-timeout={{ .Values.replication.logRpcTimeout }}
        {{- end }}
        {{- if or .Values.replication.server.enabled (eq .Values.mode "follower") }}
          --replication.cert-filename=/replication-cert/tls.crt
          --replication.key-filename=/replication-cert/tls.key
          --replication.ca-filename=/replication-cert/ca.crt
        {{- end }}
          --maintenance.enabled={{ .Values.maintenance.enabled }}
        {{- if .Values.maintenance.enabled }}
          --maintenance.token=$(MAINTENANCE_TOKEN)
        {{- end }}
          --tables.enabled={{ .Values.tables.enabled }}
        {{- if .Values.tables.enabled }}
          --tables.token=$(TABLES_TOKEN)
        {{- end }}
        {{- if .Values.extraArgs }}
        {{- range $key, $value := .Values.extraArgs }}
          --{{ $key }}={{ $value }}
        {{- end }}
        {{- end }}
        ports:
        - name: cluster
          containerPort: {{ .Values.cluster.port }}
        - name: https
          containerPort: {{ .Values.api.port }}
        - name: http-metrics
          containerPort: {{ .Values.metricsPort }}
        {{- if and .Values.replication.server.enabled (eq .Values.mode "leader") }}
        - name: https-repl
          containerPort: {{ .Values.replication.server.port }}
        {{- end }}
        {{- with .Values.resources }}
        resources: {{- toYaml . | nindent 10 }}
        {{- end }}
        startupProbe:
          httpGet:
            path: /healthz
            port: {{ .Values.metricsPort }}
          initialDelaySeconds: {{ .Values.startupProbe.initialDelaySeconds }}
          periodSeconds: {{ .Values.startupProbe.periodSeconds }}
          timeoutSeconds: {{ .Values.startupProbe.timeoutSeconds }}
          failureThreshold: {{ .Values.startupProbe.failureThreshold }}
          successThreshold: {{ .Values.startupProbe.successThreshold }}
        readinessProbe:
          httpGet:
            path: /healthz
            port: {{ .Values.metricsPort }}
          initialDelaySeconds: {{ .Values.readinessProbe.initialDelaySeconds }}
          periodSeconds: {{ .Values.readinessProbe.periodSeconds }}
          timeoutSeconds: {{ .Values.readinessProbe.timeoutSeconds }}
          failureThreshold: {{ .Values.readinessProbe.failureThreshold }}
          successThreshold: {{ .Values.readinessProbe.successThreshold }}
        {{- if .Values.securityContext }}
        securityContext:
          {{- include "regatta.securityContext" . | nindent 10 }}
        {{- end }}
        volumeMounts:
        - mountPath: /api-cert
          name: api-cert
        {{- if or .Values.replication.server.enabled (eq .Values.mode "follower") }}
        - mountPath: /replication-cert
          name: replication-cert
        {{- end }}
        - mountPath: /data
          name: data
        {{- if .Values.temp.enabled }}
        - mountPath: /tmp
          name: temp
        {{- end }}
      volumes:
      {{- if .Values.temp.enabled }}
      - name: temp
        emptyDir:
          {{ with .Values.temp }}
          medium: {{ .medium }}
          sizeLimit: {{ .sizeLimit }}
          {{- end }}
      {{- end }}
      - name: api-cert
        secret:
          defaultMode: 420
          secretName: {{ template "regatta.name" . }}-api-cert
        {{- if or .Values.replication.server.enabled (eq .Values.mode "follower") }}
      - name: replication-cert
        secret:
          defaultMode: 420
          secretName: {{ template "regatta.name" . }}-replication-cert
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations: {{- toYaml . | nindent 6 }}
      {{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector: {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- if .Values.podAntiAffinity.enabled }}
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - topologyKey: {{ .Values.podAntiAffinity.topologyKey }}
            labelSelector:
              matchLabels:
                {{- include "regatta.selectorLabels" $ | nindent 16 }}
      {{- end }}
  volumeClaimTemplates:
  - apiVersion: v1
    kind: PersistentVolumeClaim
    metadata:
      name: data
    spec:
    {{- .Values.persistentVolumeClaim.spec | toYaml | nindent 6 }}
