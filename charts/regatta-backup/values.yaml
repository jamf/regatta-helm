## Regatta configuration

# -- nameOverride: Provide a name in place of `regatta`.
nameOverride: ""
# -- fullnameOverride: String to fully override `"regatta-backup.fullname"`
fullnameOverride: ""

# -- priorityClassName: Defines the priorityClassName of the Regatta pods.
#   Leave empty string if you don't want to use this feature.
## ref: https://kubernetes.io/docs/concepts/scheduling-eviction/pod-priority-preemption/
priorityClassName: ""

# -- imagePullSecrets: For the images.
imagePullSecrets: []

# -- tolerations: Defines tolerations for the Regatta pods
## ref: https://kubernetes.io/docs/concepts/scheduling-eviction/taint-and-toleration/
tolerations: []
# - key: "key1"
#   operator: "Equal"
#   value: "value1"
#   effect: "NoSchedule"

# -- nodeSelector: Map of nodeSelector labels for the Regatta pods
## ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#nodeselector
nodeSelector: {}
#  nodeLabel: value

# Settings of Regatta pods anti-affinity
## ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#affinity-and-anti-affinity
podAntiAffinity:
  # -- enabled: Enable or disable the pod anti-affinity
  enabled: false
  # -- topologyKey: Use to override the topologyKey value
  topologyKey: kubernetes.io/hostname

# -- additionalPodLabels: Optional map of additional pod labels
additionalPodLabels: {}

# -- podAnnotations: Optional map of pod annotations
podAnnotations: {}

# ServiceAccount configuration
serviceAccount:
  # -- create: Create the ServiceAccount for regatta
  create: true
  # -- name: ServiceAccount name override, default: `"regatta-backup.fullname"`
  name: ""

# Pod security context configuration
# -- podSecurityContext: The full content of the spec.securityContext
podSecurityContext:
  fsGroup: 1000
  fsGroupChangePolicy: OnRootMismatch
  runAsGroup: 1000
  runAsUser: 1000

# Security context configuration
# -- securityContext: The full content of the container.securityContext
securityContext:
  privileged: false
  allowPrivilegeEscalation: false
  capabilities:
    drop:
    - ALL

# -- successfulJobsHistoryLimit: CronJob config field
successfulJobsHistoryLimit: 4
# -- failedJobsHistoryLimit: CronJob config field
failedJobsHistoryLimit: 2
# -- schedule: Cron expression defining how often the backup is executed
schedule: "0 */4 * * *"

# -- workdir: Could be used to set specifics about backup job workdir, by default emptyDir is used.
# For larger backups ephemeralVolume should be considered.
workdir: {}

# -- source: Source container configuration.
source:
  # Image configuration
  #   Note: Use overrides with caution since other Regatta versions might not be compatible with this helm chart!
  image:
    # -- repository: Default image repository
    repository: ghcr.io/jamf/regatta
    # -- imagePullPolicy: ref: https://kubernetes.io/docs/concepts/containers/images/#image-pull-policy
    imagePullPolicy: IfNotPresent
    # -- tag: Override to use different image version
    tag: v0.5.1
  # -- resources: Define the resources of the container
  resources:
    limits:
      cpu: '1'
      memory: 1Gi
    requests:
      cpu: 200m
      memory: 512Mi
  # -- address: Regatta API server address.
  address: regatta-api:8443

  # -- ca:
  #   Depending on value of `secretKind`
  #     - sealedSecret: enter the encrypted value
  #     - plaintext: enter the plaintext secret value
  #     - none: the field is ignored
  #     - ref: the reference to existing token
  ca:
    # -- secretKind:
    #   May be one of:
    #   - sealedSecret: Use if you have SealedSecrets support on your cluster. (https://sealed-secrets.netlify.app/)
    #   - plaintext: Use to create Opaque Secret from the plaintext.
    #   - ref: Use to reference token from existing secret.
    #   - none: Do not create the secret with the token at all. The secret must be provided externally.
    #
    #     Secret example:
    #
    #        apiVersion: v1
    #        kind: Secret
    #        metadata:
    #          name: regatta-backup-api-cert
    #        data:
    #          token: c2VjcmV0LXRva2Vu
    #
    secretKind: none
    # -- value:
    #   Based on the secretKind it may be literal token, the SealedSecret to create or a reference to existing secret.
    value: "secret-token"

  # -- token:
  #   Depending on value of `secretKind`
  #     - sealedSecret: enter the encrypted value
  #     - plaintext: enter the plaintext secret value
  #     - none: the field is ignored
  #     - ref: the reference to existing token
  token:
    # -- secretKind:
    #   May be one of:
    #   - sealedSecret: Use if you have SealedSecrets support on your cluster. (https://sealed-secrets.netlify.app/)
    #   - plaintext: Use to create Opaque Secret from the plaintext.
    #   - ref: Use to reference token from existing secret.
    #   - none: Do not create the secret with the token at all. The secret must be provided externally.
    #
    #     Secret example:
    #
    #        apiVersion: v1
    #        kind: Secret
    #        metadata:
    #          name: regatta-backup-maintenance-token
    #        data:
    #          token: c2VjcmV0LXRva2Vu
    #
    secretKind: none
    # -- value:
    #   Based on the secretKind it may be literal token, the SealedSecret to create or a reference to existing secret.
    value: "secret-token"

# -- sink: Sink container configuration
sink:
  # -- bucket: Address of the s3 bucket where to upload backup
  bucket: "s3-bucket-name"
  # -- image: S3 backup tool image override.
  image:
    repository: peakcom/s5cmd
    tag: v2.2.2
    # -- imagePullPolicy: ref: https://kubernetes.io/docs/concepts/containers/images/#image-pull-policy
    imagePullPolicy: IfNotPresent
  # -- resources: Define the resources of the container
  resources:
    limits:
      cpu: '1'
      memory: 256Mi
    requests:
      cpu: 200m
      memory: 128Mi
